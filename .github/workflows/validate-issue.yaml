on:
  issues:
    types:
      - labeled

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check if issue is labeled within one minute
        id: check-time
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.issue;
            const createdAt = new Date(issue.created_at);
            const now = new Date();
            const oneMinute = 60 * 1000; // milliseconds
            if (now - createdAt > oneMinute) {
              console.log('Issue was not labeled within one minute. Skipping...');
              return false;
            }
            return true;
          result-encoding: string

      - name: Check if issue is labeled as bug or question
        id: check-label
        if: steps.check-time.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const labels = github.event.issue.labels;
            const isBugOrQuestion = labels.includes('bug') || labels.includes('question');
            core.setOutput('isBugOrQuestion', isBugOrQuestion);

      - name: Validate issues
        if: steps.check-label.outputs.isBugOrQuestion == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.issue;
            const body = context.payload.issue.body;
            const versionRegex = /### 程序版本\s*(.+)\s*### 所使用的/;
            const versionMatch = body.match(versionRegex);
            let closeReasons = [];
            if (!versionMatch || !versionMatch[1].match(/\d+/)) {
              closeReasons.push('请填入有效的程序版本。');
            }
            if (closeReasons.length > 0) {
              const newComment = context.issue({
                body: `Issue 未通过验证：\n${closeReasons.join('\n')}`
              });
              await github.issues.createComment(newComment);
              await github.issues.update({
                owner: issue.owner,
                repo: issue.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}