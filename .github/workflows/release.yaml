name: Release
on:
  push:
    tags:
      - 'v*'
jobs:
  release-bins-sharded:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    strategy:
      fail-fast: false
      matrix:
        shard_index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    env:
      SHARD_TOTAL: 10
      SHARD_INDEX: ${{ matrix.shard_index }}
    steps:
      - uses: actions/checkout@v4
      - run: echo "GIT_TAG=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: '**/go.sum'
      - run: go install github.com/golang/mock/mockgen@v1.6.0
      - name: Restore cache of built web (src/webapp/build)
        id: cache_web_build_restore
        uses: actions/cache/restore@v4
        with:
          path: |
            src/webapp/build
          key: web-build-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles( '.node-version', 'src/webapp/yarn.lock', 'src/webapp/package.json', 'src/webapp/tsconfig.json', 'src/webapp/src/**', 'src/webapp/public/**') }}
      - name: Build Web Page (fallback if cache miss)
        if: ${{ steps.cache_web_build_restore.outputs.cache-hit != 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
      - name: Build Web Page (fallback if cache miss) - run build without web
        if: ${{ steps.cache_web_build_restore.outputs.cache-hit != 'true' }}
        run: make release-no-web
      - name: Build go binaries (shard ${{ matrix.shard_index }}/10)
        run: make release-no-web
      - name: Upload packaged artifacts only
        uses: actions/upload-artifact@v4
        with:
          name: bililive-bins-shard-${{ matrix.shard_index }}
          path: |
            bin/*.tar.gz
            bin/*.zip
            bin/*.7z
          if-no-files-found: ignore

  publish-release:
    runs-on: ubuntu-latest
    needs: [release-bins-sharded]
    steps:
      - uses: actions/checkout@v4
      - run: echo "GIT_TAG=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV
      - name: Download all shard artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Publish GitHub Release with all packaged files
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/**/*.tar.gz
            dist/**/*.zip
            dist/**/*.7z
          prerelease: ${{ contains(env.GIT_TAG, 'rc') }}

  release-docker-images:
    runs-on: ubuntu-latest
    needs:
      - publish-release
    steps:
      - uses: actions/checkout@v4
      - run: echo "GIT_TAG=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV
      - run: if ! echo $GIT_TAG | grep "rc" >/dev/null; then DOCKER_TAGS=chigusa/bililive-go:$GIT_TAG,chigusa/bililive-go:latest; else DOCKER_TAGS=chigusa/bililive-go:$GIT_TAG; fi; echo "DOCKER_TAGS=$DOCKER_TAGS" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build the Docker image
        uses: docker/build-push-action@v5
        with:
          file: Dockerfile
          build-args: tag=${{ env.GIT_TAG }}
          platforms: linux/amd64,linux/arm64/v8,linux/arm/v7
          push: true
          tags: ${{ env.DOCKER_TAGS }}
          cache-from: type=gha,scope=bililive-go
          cache-to: type=gha,mode=max,scope=bililive-go
